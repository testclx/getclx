-- Ensure LocalPlayer is loaded
local LP = game.Players.LocalPlayer
if not LP then
    game.Players.PlayerAdded:Wait()
    LP = game.Players.LocalPlayer
end

-- Rest of the variable declarations (unchanged)
local TS = game:GetService("TweenService")
local UIS = game:GetService("UserInputService")
local RS = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local Lighting = game:GetService("Lighting")

-- Drawing circle setup (add a check for Drawing library)
local circle
if Drawing then
    circle = Drawing.new("Circle")
    circle.Thickness = 1
    circle.NumSides = 100
    circle.Radius = Settings.AimAssistFOV
    circle.Visible = false
    circle.Color = Settings.FOVColor
    circle.Filled = false
else
    warn("Drawing library not available. Circle will not be drawn.")
end

-- Main frame setup (fix the syntax error on line 176)
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 400, 0, 500)
mainFrame.Position = UDim2.new(0.5, -200, 0.5, -250)
mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
mainFrame.BorderSizePixel = 0 -- Fixed the typo here
mainFrame.ClipsDescendants = true
mainFrame.Parent = gui
mainFrame.Active = false
mainFrame.Selectable = false

-- Aiming logic (add nil checks in RenderStepped)
RS.RenderStepped:Connect(function()
    if isUnlocked then
        if circle then
            circle.Position = UIS:GetMouseLocation()
        end
        if States.AimAssist and isTargeting and lockedTarget and lockedTarget.Character and lockedTarget.Character:FindFirstChild("Head") then
            local head = lockedTarget.Character.Head
            local predictedPos = head.Position + head.Parent.HumanoidRootPart.Velocity * Settings.Prediction
            local screenPos, onScreen = Camera:WorldToViewportPoint(predictedPos)
            local rayOrigin = Camera.CFrame.Position
            local rayDirection = (predictedPos - rayOrigin).Unit * Settings.AimAssistMaxDistance
            local raycastParams = RaycastParams.new()
            raycastParams.FilterDescendantsInstances = {LP.Character}
            raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
            local result = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
            if onScreen and (not result or result.Instance:IsDescendantOf(lockedTarget.Character)) then
                local mousePos = UIS:GetMouseLocation()
                local targetPos = Vector2.new(screenPos.X, screenPos.Y)
                local distance = (targetPos - mousePos).Magnitude
                if distance <= Settings.AimAssistFOV then
                    local currentCFrame = Camera.CFrame
                    local newCFrame = CFrame.new(currentCFrame.Position, predictedPos)
                    Camera.CFrame = currentCFrame:Lerp(newCFrame, Settings.AimAssistSmoothness)
                else
                    lockedTarget = nil
                end
            else
                lockedTarget = nil
            end
        end
    end
end)
